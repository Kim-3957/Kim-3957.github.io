I"p<h1 id="선형칼만필터-3">선형칼만필터 (3)</h1>
<p>칼만필터는 예측단계와 추정(업데이트) 두개의 시퀀스를 가지는 필터이다.</p>

<blockquote>
  <ol>
    <li>대충 이전의 데이터를 가지고 다음에 들어올 입력값을 예상해놓는다 (예측단계) <br />
1.5 예측값의 분산의 계산 (공분간 계산단계)
<strong>2. 입력이 들어왔다. (관측)</strong></li>
    <li>입력데이터와 예측데이터를 비교해서 최적의 출력값을 추정 (업데이트 단계)</li>
  </ol>
</blockquote>

<p>이번글에서는 측정에 관한 이야기를 해보겠다.</p>

<h1 id="측정을-해보았어요">측정을 해보았어요</h1>

<p>자 이제 실제로 측정을 하기 전에 예측을 다 해놨다.<br />
예측의 공분산까지! 계산을 완료했다.<br />
저번글의 수식이 잘 이해가 안되도 절망할 필요가없다.<br />
사실 별로 중요하지 않다.<br />
학술적으로는 중요하지만, 우리들의 목적은 칼만필터 그것이 목적이 아니라, 그것을 이용해서 새로운 가치를 창조하는 일이다.<br />
그래서 사소한곳에 힘빼지 말자.</p>

<p>이제는 측정을해 봤다고 치자.<br />
측정의 단계에도 우리는 모델을 이용할 필요가있다.</p>

<blockquote>
  <p>아니 측정에 모델이 필요해요?</p>
</blockquote>

<p>네, 보통 우리가 원하는 데이터는 측정값을 그대로 쓰는게아니고<br />
좌표변환이 일어난다던지 (가속도센서, 자이로센서), 값이 뻥튀기 되어서 나온다던지 (힘센서등등), <br />
즉, 우리가 생각하는대로 측정이 일어난다고 생각하지말자</p>

<p>측정값을 <code class="MathJax_Preview">z_k</code><script type="math/tex">z_k</script> 라고하자<br />
방금 설명한대로, 측정에 쓰는 관측행렬 (Observation matrix) 인 <code class="MathJax_Preview">H</code><script type="math/tex">H</script> 는 여기서는 다음과같이 두겠다.</p>

<pre class="MathJax_Preview"><code>H: \begin{bmatrix}
    1 &amp; 0\\
    0 &amp; 1
    \end{bmatrix}</code></pre>
<script type="math/tex; mode=display">% <![CDATA[
H: \begin{bmatrix}
    1 & 0\\
    0 & 1
    \end{bmatrix} %]]></script>

<p>이말인즉슨, <code class="MathJax_Preview">H</code><script type="math/tex">H</script> 는 1로 두겠다는것이다.<br />
하지만, 고차원으로 갈수록 <code class="MathJax_Preview">H</code><script type="math/tex">H</script> 는 중요하기 때문에, 결코 무시할 수 없지만, 1로두고 생각하는게 가장 이해하기 쉽기때문에 여기서는 1로두고 진행한다.</p>

<p>일반적인 모델의 모습은 다음과 같다.</p>

<pre class="MathJax_Preview"><code>z_k = H_k x_k + v_k</code></pre>
<script type="math/tex; mode=display">z_k = H_k x_k + v_k</script>

<p>그러니까 측정값 <code class="MathJax_Preview">z_k</code><script type="math/tex">z_k</script>을 가지고 실제의 <code class="MathJax_Preview">x_k</code><script type="math/tex">x_k</script> 를 추정하러 가는것이다.<br />
여기서도 똑같이 계측 노이즈 <code class="MathJax_Preview">v_k</code><script type="math/tex">v_k</script> 를 모델안에 집어넣은것을 알수있다.<br />
그러면 이것도 가우시안 분포를 따른다고 가정을 한다.</p>

<pre class="MathJax_Preview"><code>v_k \sim \mathcal{N}(0,R_k)</code></pre>
<script type="math/tex; mode=display">v_k \sim \mathcal{N}(0,R_k)</script>

<p>이렇게 하면, 저번에 설명했던 3가지의 (공)분산행렬을 다 소개했다.<br />
축하한다 3/6이 끝났다.</p>

<h1 id="인줄-알았찌-알파베타필터-형식만-알고가">인줄 알았찌? 알파베타필터 형식만 알고가</h1>

<p>칼만필터느 알파베타 필터의 한 종류이다.<br />
알파베타 필터의 생김새를 잠시 보자.</p>

<pre class="MathJax_Preview"><code>F_{t+1} = \alpha A_t + (1-\alpha)F_t</code></pre>
<script type="math/tex; mode=display">F_{t+1} = \alpha A_t + (1-\alpha)F_t</script>

<p>요거는 알파베타함수의 한 종류인, 지수이동평균 필터이다.<br />
<code class="MathJax_Preview">A</code><script type="math/tex">A</script> 는 실측치 <code class="MathJax_Preview">F</code><script type="math/tex">F</script> 는 필터링후의 값이다.<br />
알파값만 가지고 들어오는 데이터의 가중값을 계산, 그리고 최종필터치를 계산하는 방식이다.</p>

<p>그러면, 칼만필터에서 이 알파는 어떻게 계산을 할까?<br />
바로 칼만 게인이다.<br />
다음의 일반적인 칼만필터 추정치계산의 식을 살펴보자</p>

<pre class="MathJax_Preview"><code>\hat{x}_k(+) = \hat{x}_k(-) + K_k[z_k - H\hat{x}_k(-)]</code></pre>
<script type="math/tex; mode=display">\hat{x}_k(+) = \hat{x}_k(-) + K_k[z_k - H\hat{x}_k(-)]</script>

<p>우리들이 모르는 정의는 없을것이다.
눈치를 챈사람도 있겠지만, 그렇다 드디어 추정치를 계산할 수있게 된것이다.<br />
<code class="MathJax_Preview">H</code><script type="math/tex">H</script> 를 1 로 치환하고 알파베타 필터의 형태로 바꾸어 보겠다.</p>

<pre class="MathJax_Preview"><code>\hat{x}_k(+) = K_kz_k + (1-K_k)\hat{x}_k(-)</code></pre>
<script type="math/tex; mode=display">\hat{x}_k(+) = K_kz_k + (1-K_k)\hat{x}_k(-)</script>

<p>형태가 소름돋게 똑같지 않는가?<br />
더욱놀라운것은 <code class="MathJax_Preview">K_k</code><script type="math/tex">K_k</script> 가 k의 함수이자 시간에 의존해서 변한다는 것이다.<br />
즉, 계속 변화한다.<br />
칼만게인이 커지면, 계측치 <code class="MathJax_Preview">z_k</code><script type="math/tex">z_k</script> 를 더 신뢰하고<br />
칼만게인이 작아지면, 예측치 <code class="MathJax_Preview">\hat{x}_k(-)</code><script type="math/tex">\hat{x}_k(-)</script> 를 더 신뢰한다는 말이다.</p>

<p>여기까지하면 4/6 끝났다.</p>
:ET